services:
  postgres:
    image: postgres:14
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mirth
      POSTGRES_DB: mirth
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d mirth"]
      interval: 10s
      timeout: 5s
      retries: 5

  nlp-service:
    build:
      context: ./nlp-service
      dockerfile: Dockerfile
      args:
        # Pass build args for network configuration if needed
        - PIP_TIMEOUT=300
        - PIP_RETRIES=5
    restart: always
    env_file:
      - ./.env
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
    # Add healthcheck for nlp-service
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/health', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        - PIP_TIMEOUT=300
        - PIP_RETRIES=5
    restart: always
    env_file:
      - ./.env
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      nlp-service:
        condition: service_healthy
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./langchain-f849f-firebase-adminsdk-fbsvc-d0950e3194.json:/app/firebase-credentials.json:ro
      - ./static:/app/static
    environment:
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    # Add healthcheck for backend
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  frontend:
    build:
      context: ./frontend-cookbook-ai
      dockerfile: Dockerfile
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    # Add healthcheck for frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data: